
A race condition is a flaw that produces an unexpected result when the timing of actions impact other actions. An example may be seen on a multithreaded application where actions are being performed on the same data.

In other words, race conditions are triggered when users unintentionally (impatient users) or intentionally (malicious actors) are tampering with application functionality timings, for example, sending a request at the same time by clicking very fast on a button.


it's vulnerability that arises at the Logic of the application :)

Usually, race conditions can affect applications that apply mathematical functions like add and subtract, for example money transfers, modifying a product price by applying a gift card or discount voucher, and so on.


User must tamper with the sequence of the events in order to find a race condition vulnerability, like applying the same discount code twice at the same moment, which will result in subtracting the same amount multiplied by two, but this depends very much on the back-end environment. It will occur mostly in multi-threaded applications. In our example, two threads would be trying to modify the shared piece of data (the product price) at the same time.



if operation done using threads, you could fool it by sending same two requests in the same time like if you have 2 accounts in the bank:
	Account A: $3000 Balance
	Account B: $0 Balance

	sending $3000 from account A to account B, you couldn't send $5000 cuz you just have $3000, but you could send two requests at the same time and it could work with you!

	





