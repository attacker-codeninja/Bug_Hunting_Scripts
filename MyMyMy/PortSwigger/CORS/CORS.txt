the ORIGIN is basically:
1) the scheme   https://
2) host		    example.com
3) port			443

https://example.com:443

there are two headers availiable:

1) Access-Control-Allow-Origin
2) Access-Control-Allow-Credentials


Access-Control-Allow-Origin:
--------------------------------
	1) Access-Control-Allow-Origin: *                 Anyone from any website
	2) Access-Control-Allow-Origin: <origin>          Just one Domain that is allowed to access Resources
	3) Access-Control-Allow-Origin: null			  nobody

if the server configured Access-Control-Allow-Origin: *   => (wildcard) so the Access-Control-Allow-Credentials is not allowed to use




Access-Control-Allow-Credentials:
-------------------------------------
	Access-Control-Allow-Credentials: true



CORS Vulnerabilites:
------------------------

	1) Server takes the Origin of the request and then reflects it back in the response which make it vulnerable cuz it seems like the wildcard * meaning that you allowing any origin on the internet to access the Public Resources of the server

	2) Error Parsing Origin headers

		1) granting access to all domains that end in a specific string
			Example: bank.com
			Bypass: maliciousbank.com
		2) granting access to all domains that being with a specific string
			Example: bank.com
			Bypass: bank.com.malicious.com
		3) whitelisted null origin value
			it's similar to wildcard character cuz if we send the request from iframe it would appear as it would coming from the origin null and it would allow the access of the Resources of the site, not only that but the null is much more dangerous cuz it allows using authorized request Unlike the whildcard * which prevent using authorized requests

the null origin vlaue much more worse than the wildcard character cuz as you know the wildcard character if you do it, the Access-Control-Allow-Credentials is not allowed to use, meaning that you can't sent any authorized requests, but the null origin value is much worse cuz it didn't abide to these rules meaning that if you can launch an attack coming from an iframe and the request looks like it came from null origin, so that means that you can send authorized requests meaning that the impact is higher cuz the public Resources you can look at them from your browsers while the authorized requests would be under the victim





Testing for CORS:
--------------------

	Black-Box Testing:
	--------------------

		mapping all the application and see all the requests and search for any CORS Headers used by the application
		if there is no CORS Headers that doesn't mean that the application didn't use of the CORS Protocol cuz it may be using it on the backend
			Test for dynamic generation:
				that comes in handy when you have an ORIGIN header that needs to be dynamically generated on the backend
				1) granting access to all domains that end in a specific string
					Example: bank.com
					try change the bank.com to malicoiusbank.com and see if it reflects back to you, if it is so the logic of the backend application is it takes the ORIGIN from your request and send it back to you which make it vulnerable
					Bypass: maliciousbank.com
				2) granting access to all domains that being with a specific string
					Example: bank.com
					try change the bank.com to bank.com.malicoiusbank.com and see if it reflects back to you, if it is so the application regex is probably grep for the string bank.com on the start of the string so maybe on your site malicious.com you can make subdomain bank.com.malicious.com to bypass it
					Bypass: bank.com.malicious.com
				3) whitelisted null origin value
					it's similar to wildcard character cuz if we send the request from iframe it would appear as it would coming from the origin null and it would allow the access of the Resources of the site, not only that but the null is much more dangerous cuz it allows using authorized request Unlike the whildcard * which prevent using authorized requests
				4) Does it restrict the protocol?
					if it uses https try use http and this you could try to combine it with other attacks that you want to chain with http requests not https
				5) Does it allow Credentials?
					if the application uses Access-Control-Allow-Credentials: true      so the impact would be higher cuz you would be able to access authenticated pages not only public pages!

				Once you have determined that a CORS vulnerability exists, review the application's functionality to determine how you can prove impact.

	White-Box Testing:
	--------------------

		Identify the framework/technologies that is being used by the application
		find out how this specific technology allows for CORS configuration
		Review code to identify any misconfigurations in CORS rules


